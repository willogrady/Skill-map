 {
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "azure_sql_db_name":{
      "defaultValue":"svccompanyrolesdb",
      "type":"String"
    },
    "azure_sql_server_name": {
          "defaultValue": "skillsmapdbserver",
          "type": "String"
    },  
    "keyVaultName": {
      "type": "string",
      "metadata": { 
        "description": "Specifies the name of the key vault."
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
      }
    },
    "objectId": {
      "type": "string",
      "metadata": {
        "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
      }
    },
    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "all"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Specifies whether the key vault is a standard vault or a premium vault."
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": "{}",
      "metadata": {
        "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
      }
    },
    "apiManagementServiceName": {
      "type": "string",
      "metadata": {
        "description": "API Managment Service Name"
      }
    },
    "publisherEmail": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The email address of the owner of the service"
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Developer",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Developer",
      "metadata": {
        "description": "The pricing tier of this API Management service"
      }
    },
    "skuCount": {
      "type": "string",
      "allowedValues": [
        "1",
        "2"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "The instance size of this API Management service."
      }
    },
    "siteName": {
      "type": "string",
      "metadata": {
        "description": "Name of azure web app"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of resource group to be used for mysql server"
      }
    },
    "administratorLogin": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Database administrator login name"
      }
    },
    "administratorLoginPassword": {
      "type": "securestring",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Database administrator password"
      }
    },
    "databaseSkucapacity": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2,
        4,
        8,
        16,
        32
      ],
      "metadata": {
        "description": "Azure database for MySQL compute capacity in vCores (2,4,8,16,32)"
      }
    },
    "databaseSkuName": {
      "type": "string",
      "defaultValue": "B_Gen5_1",
      "allowedValues": [
        "B_Gen5_1",
        "GP_Gen5_2",
        "GP_Gen5_4",
        "GP_Gen5_8",
        "GP_Gen5_16",
        "GP_Gen5_32",
        "MO_Gen5_2",
        "MO_Gen5_4",
        "MO_Gen5_8",
        "MO_Gen5_16",
        "MO_Gen5_32"
      ],
      "metadata": {
        "description": "Azure database for MySQL sku name "
      }
    },
    "databaseSkuSizeMB": {
      "type": "int",
      "allowedValues": [
        102400,
        51200,
        5120
      ],
      "defaultValue": 5120,
      "metadata": {
        "description": "Azure database for MySQL Sku Size "
      }
    },
    "databaseSkuTier": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "GeneralPurpose",
        "MemoryOptimized"
      ],
      "metadata": {
        "description": "Azure database for PostgreSQL pricing tier"
      }
    },
    "mysqlVersion": {
      "type": "string",
      "allowedValues": [
        "5.6",
        "5.7"
      ],
      "defaultValue": "5.7",
      "metadata": {
        "description": "MySQL version"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "databaseSkuFamily": {
      "type": "string",
      "defaultValue": "Gen5",
      "metadata": {
        "description": "Azure database for PostgreSQL sku family"
      }
    },
    "hostingPlanName": {
      "type": "string",
      "metadata": { 
        "description": "Name of app service plan"
      }
    }
  },
  "variables": {
    "databaseName": "[concat(parameters('siteName'), 'db')]",
    "serverName": "[concat(parameters('resourceGroupName'), 'MSM')]",
    "hostingPlanName": "[concat(parameters('hostingPlanName'))]",
    "apiManagementServiceName": "[concat(parameters('apiManagementServiceName'))]",
    "MSMVnetPrefix": "10.1.0.0/28",
    "MSMVnetSubnet1Name": "MSMSubnet",
    "MSMVnetSubnet1Prefix": "10.1.0.0/28"
  },
  "resources": [
    {
      "name": "[parameters('apiManagementServiceName')]",
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2019-01-01",
      "tags": {},
      "properties": {
        "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
        "hostnameConfigurations": [
          {
            "type": "Proxy",
            "hostName": "[concat(parameters('apiManagementServiceName'), '.azure-api.net')]",
            "defaultSslBinding": "true",
            "negotiateClientCertificate": "false"
          }
        ],
        "customProperties": {
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "False",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2": "False"
        },
        "enableClientCertificate": "boolean",
        "virtualNetworkType": "None",
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('apiManagementServiceName')]"
      },
      "sku": {
        "name": "Developer",
        "capacity": "1"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('location')]"
    },
    {
      "apiVersion": "2016-09-01",
      "name": "[parameters('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "workerSizeId": "1",
        "reserved": false,
        "numberOfWorkers": 0
      },
      "sku": { 
        "Tier": "Standard",
        "Name": "S1"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "name": "[parameters('siteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "properties": {
        "name": "[parameters('siteName')]",
        "serverFarmId": "[variables('hostingPlanName')]",
        "hostingEnvironment": "",
        "siteConfig": {
          "clientAffinityEnabled": false,
          "httpsOnly": true,
          "alwaysOn": true,
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": true
            }
          ],
          
            
              "name": "ipSecurityRestrictions",
              "input": {
               // "vnetSubnetResourceId": "[/subscriptions/911cc3b3-99f2-4ccc-88d1-b580cb4dcace/resourceGroups/rgSkillsMap/providers/Microsoft.Network/virtualNetworks/MSMVnet(rgSkillsMap, 'Microsoft.Network/virtualNetworks/subnets', 'MSMVnet', variables('MSMVnetSubnet1Name')]",
                //"vnetSubnetResourceId": "/subscriptions/911cc3b3-99f2-4ccc-88d1-b580cb4dcace/resourceGroups/rgSkillsMap/providers/Microsoft.Network/virtualNetworks/subnets/MSMVnet/MSMSubnet",
                "subscription": "CTO-MCL-PoC",
                "type": "Virtual Network",
                "virtualNetwork": "MSMVnet",
                "subnet": "MSMSubnet",
                "action": "Allow",
                "priority": "1",
                "name": "[variables('MSMVnetSubnet1Name')]"
                //"description": "[concat(variables('MSMVnetSubnet1Name')[copyIndex('ipSecurityRestrictions')], ' subnet')]"
              }
            
          
        }
      },
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "connectionstrings",
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', parameters('siteName'))]"
          ],
          "properties": {
            "defaultConnection": {
              "value": "[concat('Database=', variables('databaseName'), ';Data Source=', reference(resourceId('Microsoft.DBforMySQL/servers',variables('serverName'))).fullyQualifiedDomainName, ';User Id=', parameters('administratorLogin'),'@', variables('serverName'),';Password=', parameters('administratorLoginPassword'))]",
              "type": "MySql"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2018-02-14",
      "tags": {
        "displayName": "KeyVault"
      },
      "properties": {
        "enabledForDeployment": "[parameters('enabledForDeployment')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "objectId": "[parameters('objectId')]",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]"
            }
          }
        ],
        "sku": {
          "name": "[parameters('skuName')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('secretsObject').secrets)]"
      },
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      }
    },
    // {
    //   "apiVersion": "2017-12-01",
    //   "location": "[parameters('location')]",
    //   "name": "[variables('serverName')]",
    //   "type": "Microsoft.DBforMySQL/servers",
    //   "sku": {
    //     "name": "[parameters('databaseSkuName')]",
    //     "tier": "[parameters('databaseSkuTier')]",
    //     "capacity": "[parameters('databaseSkucapacity')]",
    //     "size": "[parameters('databaseSkuSizeMB')]",
    //     "family": "[parameters('databaseSkuFamily')]"
    //   },
    //   "properties": {
    //     "version": "[parameters('mysqlVersion')]",
    //     "administratorLogin": "[parameters('administratorLogin')]",
    //     "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
    //     "storageProfile": {
    //       "storageMB": "[parameters('databaseSkuSizeMB')]",
    //       "backupRetentionDays": "7",
    //       "geoRedundantBackup": "Disabled"
    //     },
    //     "sslEnforcement": "Enabled"
    //   },
    //   "resources": [
    //     {
    //       "type": "firewallrules",
    //       "apiVersion": "2017-12-01",
    //       "dependsOn": [
    //         "[concat('Microsoft.DBforMySQL/servers/', variables('serverName'),'/databases/' , variables('databaseName'))]",
    //         "[concat('Microsoft.DBforMySQL/servers/', variables('serverName'))]"
    //       ],
    //       "location": "[parameters('location')]",
    //       "name": "AllowAzureIPs",
    //       "properties": {
    //         "startIpAddress": "0.0.0.0",
    //         "endIpAddress": "0.0.0.0"
    //       }
    //     },
    //     {
    //       "name": "[variables('databaseName')]",
    //       "type": "databases",
    //       "apiVersion": "2017-12-01",
    //       "properties": {
    //         "charset": "utf8",
    //         "collation": "utf8_general_ci"
    //       },
    //       "dependsOn": [
    //         "[concat('Microsoft.DBforMySQL/servers/', variables('serverName'))]"
    //       ]
    //     },
    //     {
    //       "type": "Microsoft.DBforMySQL/servers/configurations",
    //       "apiVersion": "2017-12-01-preview",
    //       "name": "[concat(variables('serverName'), '/time_zone')]",
    //       "dependsOn": [
    //         "[resourceId('Microsoft.DBforMySQL/servers', variables('serverName'))]"
    //       ],
    //       "properties": {
    //         "value": "+0:00"
    //       }
    //     }
    //   ]
    // },
     {
          "type": "Microsoft.Sql/servers",
          "kind": "v12.0",
          "name": "[parameters('azure_sql_server_name')]",
          "apiVersion": "2015-05-01-preview",
          "location": "[parameters('location')]",
          "properties": {
              "administratorLogin": "[parameters('administratorLogin')]",
              "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
              "version": "12.0"
          },
          "resources":[
            {
          "name": "[concat(parameters('azure_sql_server_name'),'/AllowAllWindowsAzureIps')]",
          "type": "Microsoft.Sql/servers/firewallRules",
          "location": "[parameters('location')]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('azure_sql_server_name'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
            {
          "name": "[concat(parameters('azure_sql_server_name'),'/',parameters('azure_sql_db_name'))]",
          "type": "Microsoft.Sql/servers/databases",
          "location": "[parameters('location')]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('azure_sql_server_name'))]"
          ],
          "properties": {
            "edition": "Basic",
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "1073741824",
            "requestedServiceObjectiveName": "Basic"
          },
          "tags": {
            "displayName": "dbname"
          }
          
        }
        ],
          "dependsOn": []
      }
    /*{
      "name": "MSMVnet",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-04-01",
      "dependsOn": [ ],
      "tags": {
        "displayName": "MSMVnet"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('MSMVnetPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('MSMVnetSubnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('MSMVnetSubnet1Prefix')]"
            }
          }
          
        ]
      }
    }*/
  ]
}